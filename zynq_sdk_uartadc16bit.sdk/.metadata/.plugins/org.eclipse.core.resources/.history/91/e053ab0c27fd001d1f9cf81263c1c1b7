#include "xparameters.h"
#include "xadcps.h"
#include "stdio.h"
#include "xil_printf.h"
#include "sleep.h"
#include "xscugic.h"
#include "xuartps.h"

unsigned short calculateModbusCRC16(char* data, int length);
//adc相关
static XAdcPs xadc_inst; //XADC 驱动实例
void adc_init(void);
//串口相关
static XScuGic Intc; //中断控制器驱动程序实例
static XUartPs Uart_Ps; //串口驱动程序实例
int uart_init(XUartPs* uart_ps);
int uart_intr_init(XScuGic *intc, XUartPs *uart_ps);
void uart_senfBuf(char* pbuff,int lenght);
//数据
u32 vcc_vpvn_rawData; //VpVn 原始数据
u32 AcquisitionADC = 1;
int main(void) {
	char WriteBuf[6] = {0x02 , 0x00 , 0x00 , 0x03 , 0x00 , 0x00};
	unsigned short CRCValue = 0xffff;
	int status;
	//adc
	adc_init();
	//串口
	status = uart_init(&Uart_Ps); //串口初始化
	if (status == XST_FAILURE) {
		xil_printf("Uart Initial Failed\r\n");
		return XST_FAILURE;
	}
	uart_intr_init(&Intc, &Uart_Ps); //串口中断初始化

	while (1) {
		if(AcquisitionADC)
		{
			AcquisitionADC = 0;
			vcc_vpvn_rawData = (XAdcPs_GetAdcData(&xadc_inst,XADCPS_CH_VPVN) >> 4) & 0xfff;
			WriteBuf[1] = (vcc_vpvn_rawData>>8)&0xff;
			WriteBuf[2] = vcc_vpvn_rawData&0xff;
			CRCValue = calculateModbusCRC16(WriteBuf,4);
			WriteBuf[4] = (CRCValue>>8)&0xff;
			WriteBuf[5] = CRCValue = 0xff;
			uart_senfBuf(WriteBuf,6);
		}
	}

	return 0;
}

unsigned short calculateModbusCRC16(char* data, int length)
{
	unsigned short crc = 0xFFFF;

	for (int i = 0; i < length; ++i)
	{
		crc ^= (unsigned short)data[i];

		for (int j = 0; j < 8; ++j)
		{
			if (crc & 0x0001)
			{
				crc >>= 1;
				crc ^= 0xA001;
			}
			else
			{
				crc >>= 1;
			}
		}
	}

	// 转换字节顺序
	crc = (crc >> 8) | (crc << 8);

	return crc;
}
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
#define XADC_DEVICE_ID XPAR_XADCPS_0_DEVICE_ID //PS XADC 器件 ID
void adc_init(void)
{
	XAdcPs_Config *ConfigPtr; //XADC 配置指针
	//初始化 XADC 驱动
	ConfigPtr = XAdcPs_LookupConfig(XADC_DEVICE_ID);
	XAdcPs_CfgInitialize(&xadc_inst, ConfigPtr, ConfigPtr->BaseAddress);
	//设置 XADC 操作模式为“默认安全模式”
	XAdcPs_SetSequencerMode(&xadc_inst, XADCPS_SEQ_MODE_SAFE);
	//使能的相应的通道
	XAdcPs_SetSeqChEnables(&xadc_inst, XADCPS_SEQ_CH_VPVN);
	//设置为循环模式
	XAdcPs_SetSequencerMode(&xadc_inst, XADCPS_SEQ_MODE_CONTINPASS);
}

//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
#define UART_DEVICE_ID XPAR_PS7_UART_0_DEVICE_ID //串口设备 ID
#define INTC_DEVICE_ID XPAR_SCUGIC_SINGLE_DEVICE_ID //中断 ID
#define UART_INT_IRQ_ID XPAR_XUARTPS_0_INTR //串口中断 ID

//UART 初始化函数
int uart_init(XUartPs* uart_ps) {
	int status;
	XUartPs_Config *uart_cfg;

	uart_cfg = XUartPs_LookupConfig(UART_DEVICE_ID);
	if (NULL == uart_cfg)
		return XST_FAILURE;
	status = XUartPs_CfgInitialize(uart_ps, uart_cfg, uart_cfg->BaseAddress);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	//UART 设备自检
	status = XUartPs_SelfTest(uart_ps);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	//设置工作模式:正常模式
	XUartPs_SetOperMode(uart_ps, XUARTPS_OPER_MODE_NORMAL);
	//设置波特率:115200
	XUartPs_SetBaudRate(uart_ps, 115200);
	//设置 RxFIFO 的中断触发等级
	XUartPs_SetFifoThreshold(uart_ps, 1);

	return XST_SUCCESS;
}

//UART 中断处理函数
void uart_intr_handler(void *call_back_ref) {
	XUartPs *uart_instance_ptr = (XUartPs *) call_back_ref;
	u32 rec_data = 0;
	u32 isr_status; //中断状态标志

	//读取中断 ID 寄存器，判断触发的是哪种中断
	isr_status = XUartPs_ReadReg(uart_instance_ptr->Config.BaseAddress,
			XUARTPS_IMR_OFFSET);
	isr_status &= XUartPs_ReadReg(uart_instance_ptr->Config.BaseAddress,
			XUARTPS_ISR_OFFSET);

	//判断中断标志位 RxFIFO 是否触发
	if (isr_status & (u32) XUARTPS_IXR_RXOVR) {
		rec_data = XUartPs_RecvByte(XPAR_PS7_UART_0_BASEADDR);
		//清除中断标志
		XUartPs_WriteReg(uart_instance_ptr->Config.BaseAddress,
				XUARTPS_ISR_OFFSET, XUARTPS_IXR_RXOVR);
	}
	/*XUartPs_SendByte(XPAR_PS7_UART_0_BASEADDR, rec_data);*/
}

//串口中断初始化
int uart_intr_init(XScuGic *intc, XUartPs *uart_ps) {
	int status;
	//初始化中断控制器
	XScuGic_Config *intc_cfg;
	intc_cfg = XScuGic_LookupConfig(INTC_DEVICE_ID);
	if (NULL == intc_cfg)
		return XST_FAILURE;
	status = XScuGic_CfgInitialize(intc, intc_cfg, intc_cfg->CpuBaseAddress);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	//设置并打开中断异常处理功能
	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			(Xil_ExceptionHandler) XScuGic_InterruptHandler, (void *) intc);
	Xil_ExceptionEnable();

	//为中断设置中断处理函数
	XScuGic_Connect(intc, UART_INT_IRQ_ID,
			(Xil_ExceptionHandler) uart_intr_handler, (void *) uart_ps);
	//设置 UART 的中断触发方式
	XUartPs_SetInterruptMask(uart_ps, XUARTPS_IXR_RXOVR);
	//使能 GIC 中的串口中断
	XScuGic_Enable(intc, UART_INT_IRQ_ID);
	return XST_SUCCESS;
}


void uart_senfBuf(char* pbuff,int lenght)
{
	int i = 0;
	for(;i<lenght;i++)
	{
		XUartPs_SendByte(XPAR_PS7_UART_0_BASEADDR, rec_data);
	}
}











